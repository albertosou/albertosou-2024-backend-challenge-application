name: CI/CD Pipeline

on:
  push:
    branches: 
      - ${{ secrets.AWS_BRANCH_PROD }}
  pull_request:
    branches: 
      - ${{ secrets.AWS_BRANCH_PROD }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore src/AlbertoSouza.AppBackendChallenge

    - name: Build
      run: dotnet build src/AlbertoSouza.AppBackendChallenge --no-restore

    - name: Test
      run: dotnet test test/AlbertoSouza.AppBackendChallenge.Test --no-build --verbosity normal

    - name: Build Docker images
      run: docker-compose build

    - name: Login to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin  ${{ secrets.AWS_USER_ID }}.dkr.ecr.us-east-1.amazonaws.com

    - name: Push Docker images to ECR
      run: |
        docker tag backend-challenge-application:latest ${{ secrets.AWS_USER_ID }}.dkr.ecr.us-east-1.amazonaws.com/albertosou-2024/backend-challenge-application:latest
        docker push ${{ secrets.AWS_USER_ID }}.dkr.ecr.us-east-1.amazonaws.com/albertosou-2024/backend-challenge-application:latest

    - name: Deploy to AWS
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # Atualizar o servi√ßo do ECS para usar a nova imagem
        aws ecs update-service --cluster cluster-albertosou-2024-backend-challenge --service service-albertosou-2024-backend-challenge --force-new-deployment
