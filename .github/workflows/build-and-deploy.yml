name: Build and Deploy

on:
  push:
    branches: 
      - ${{ secrets.AWS_BRANCH_PROD }}
  pull_request:
    branches: 
      - ${{ secrets.AWS_BRANCH_PROD }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore src/AlbertoSouza.AppBackendChallenge

    - name: Build
      run: dotnet build src/AlbertoSouza.AppBackendChallenge --no-restore

    - name: Test
      run: dotnet test test/AlbertoSouza.AppBackendChallenge.Test --no-build --verbosity normal

    - name: Build and push Docker images
      env:
        AWS_XRAY_ACCESS_KEY_ID: ${{ secrets.AWS_XRAY_ACCESS_KEY_ID }}
        AWS_XRAY_REGION: ${{ secrets.AWS_XRAY_REGION }}
        AWS_XRAY_SECRET_ACCESS_KEY: ${{ secrets.AWS_XRAY_SECRET_ACCESS_KEY }}
      run: |
        docker-compose build
        # Aqui você adicionaria o comando para fazer push das imagens para um registro, se necessário
        # Por exemplo: docker-compose push

    - name: Deploy
      env:
        AWS_XRAY_ACCESS_KEY_ID: ${{ secrets.AWS_XRAY_ACCESS_KEY_ID }}
        AWS_XRAY_REGION: ${{ secrets.AWS_XRAY_REGION }}
        AWS_XRAY_SECRET_ACCESS_KEY: ${{ secrets.AWS_XRAY_SECRET_ACCESS_KEY }}
      run: |
        # Parar e remover containers existentes
        docker compose down -v
        
        # Remover todas as imagens
        docker rmi $(docker images -q)
        
        # Iniciar os novos containers
        docker compose up -d
